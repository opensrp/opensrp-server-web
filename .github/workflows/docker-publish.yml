name: Docker

on:
  push:
    # Publish `master` as Docker `master` tag.
    # See also https://github.com/crazy-max/ghaction-docker-meta#basic
    paths-ignore:
      - 'docs/**'
    branches:
      # - master 
      # - v2*
      - security-ci-scan    #To be deleted

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  pull_request:
    # Run Tests when changes are made to the Docker file
    paths:
      - 'Dockerfile'

  workflow_dispatch:
    inputs:
      customTag:
        description: "Includes the specified tag to docker image tags"
        required: false

# For Trivy Code Scanning
env:
  FULL_SUMMARY: ""
  PATCH_SUMMARY: ""

jobs:
  # Run image build test
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Run Build tests
        run: docker build . --file Dockerfile

  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.3.0

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: opensrp/opensrp-server-web
          tag-custom: ${{ github.event.inputs.customTag }}

      - name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Docker Image Repositories
        uses: docker/build-push-action@v2.5.0
        id: docker_build
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/${{ steps.docker_meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Run Trivy vulnerability scanner on Docker image - JSON (Full Scan)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ steps.docker_meta.outputs.tags }}
          format: json
          output: 'trivy-docker-full-results.json'

      - name: Create summary of trivy issues on Docker image
        run: |
          summary=$(jq -r '.Results[] | select(.Vulnerabilities) | .Vulnerabilities | group_by(.Severity) | map({Severity: .[0].Severity, Count: length}) | .[] | [.Severity, .Count] | join(": ")' trivy-docker-full-results.json | awk 'NR > 1 { printf(" | ") } {printf "%s",$0}')
          if [ -z $summary ]
          then
            summary="No vulnerabilities found"
          fi
          echo "FULL_SUMMARY=$summary" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner on Docker image - JSON (with Patches)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ steps.docker_meta.outputs.tags }}
          ignore-unfixed: true
          format: 'json'
          output: 'trivy-docker-fixable-results.json'

      - name: Create summary of trivy issues on Docker image
        run: |
          summary=$(jq -r '.Results[] | select(.Vulnerabilities) | .Vulnerabilities | group_by(.Severity) | map({Severity: .[0].Severity, Count: length}) | .[] | [.Severity, .Count] | join(": ")' trivy-docker-fixable-results.json | awk 'NR > 1 { printf(" | ") } {printf "%s",$0}')
          if [ -z $summary ]
          then
            summary="No issues or vulnerability fixes available"
          fi
          echo "PATCH_SUMMARY=$summary" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner on Docker image - SARIF
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ steps.docker_meta.outputs.tags }}
          format: sarif
          ignore-unfixed: true
          output: 'trivy-docker-results.sarif'          

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-docker-results.sarif'
      
      - name: Generate trivy HTML report on Docker image for download
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ steps.docker_meta.outputs.tags }}
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-docker-report.html'

      - name: Upload Trivy results as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: "trivy-results-opensrp-server-web-docker-report.html"
          path: './trivy-docker-report.html'
          retention-days: 30

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Trivy scan results for ${{ github.repository }} repository",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "TRIVY DOCKER SCAN RESULTS FOR ${{ github.repository }} REPOSITORY"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "   Total Vulnerabilities: ${{ env.FULL_SUMMARY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "   Vulnerabilities with fixes: ${{ env.PATCH_SUMMARY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "   View HTML result artifact: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}. Artifact is only valid for 30 days."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
